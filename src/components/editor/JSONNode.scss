@import '../../styles.scss';

.json-node {
  position: relative;
  font-family: $font-family-mono;
  font-size: $font-size-mono;
  color: $black;

  &.root {
    min-height: 100%;
    padding-bottom: $input-padding;
    box-sizing: border-box;
  }

  &.hovered {
    .header,
    .contents,
    .footer {
      background-color: $hovered-background;
    }
  }

  $selector-height: 8px; // must be about half a line height

  .props,
  .items {
    position: relative;
  }

  .header-outer,
  .footer-outer {
    display: flex;
  }

  .header {
    position: relative;

    .meta {
      > .meta-inner {
        display: flex;
        justify-content: center;
      }
    }
  }

  .contents-outer {
    display: flex;
  }

  .header,
  .contents {
    display: table;
    flex-direction: row;

    line-height: $line-height;

    > :global(*) {
      display: table-cell;
    }
  }

  .contents {
    padding-left: $line-height ; // must be the same as the width of the expand button
  }

  .footer {
    display: inline-flex;
    padding-left: $line-height + $input-padding; // must be the same as the width of the expand button
  }

  .insert-button-area {
    visibility: hidden;
    padding: 0 $padding / 2;
    flex: 1; // must fill all left over space at the right side of the editor, so you can click there

    &.inside {
      display: inline-flex;
      align-items: center;
    }

    &.after {
      display: flex;
      align-items: end;
      line-height: $line-height;
    }
  }

  &:hover > .contents-outer .insert-button-area:not(.selected),
  .header-outer:hover > .insert-button-area:not(.selected),
  .footer-outer:hover .insert-button-area:not(.selected) {
    visibility: visible;
  }

  .insert-area {
    $height: 4px;

    position: relative;
    background: $theme-color;

    width: 100%;
    max-width: 250px;
    height: $height;
    margin-top: -$height/2;
    margin-bottom: -$height/2;
    z-index: 1;
  }
}

.expand {
  position: relative;
  top: 2px;
  width: $line-height;
  height: $line-height;
  padding: 0;
  margin: 0;
  border: none;
  cursor: pointer;
  background: transparent;
  color: $gray-icon;
  font-size: $font-size-mono;
  line-height: $line-height;
}

.meta,
.separator,
.index,
.bracket {
  vertical-align: top;
  color: $meta-color;
}

.index {
  padding: 0 $padding / 2;
}

.bracket {
  padding: 0 2px;

  &.expanded {
    padding-right: $padding;
  }
}

.tag,
.insert-button {
  border: none;
  font-size: $font-size-small;
  font-family: $font-family;
  color: white;
  background: $light-gray;
  border-radius: 2px;
  cursor: pointer;
  position: relative;

  &:hover {
    background: lighten($light-gray, 5%);
  }
}

.tag {
  vertical-align: top;
  padding: 0 4px 1px;
  margin: 2px;
}

.insert-button {
  padding: 0 4px;
  margin: 0;
  line-height: $line-height;
}

// TODO: simplify the CSS needed to correctly highlight the selection
.json-node {
  // entry selected
  &.selected {
    .header,
    .contents,
    .meta,
    .expand,
    .footer {
      background-color: $selection-background;
      color: $selection-color;
    }

    .bracket,
    .separator,
    .index {
      color: $meta-color-selected;
    }

    :global(.value) {
      color: $selection-color;
    }

    .tag {
      background: $theme-color-light;
    }
  }

  // key selected
  &.selected-key {
    > .contents-outer > .contents > :global(.key),
    > .header-outer > .header > :global(.key) {
      background-color: $selection-background;
      color: $selection-color;
    }
  }

  &.selected-value > .contents-outer > .contents > :global(.value) {
    background-color: $selection-background;
    color: $selection-color;
  }

  // value selected
  &.selected-value {
    > .header-outer > .header > .meta,
    > .footer-outer > .footer,
    > .contents-outer > .contents .contents,
    .props .contents,
    .props .header-outer .header,
    .props .footer-outer .footer,
    .props .expand,
    .items .contents,
    .items .header-outer .header,
    .items .footer-outer .footer,
    .items .expand {
      background-color: $selection-background;
      color: $selection-color;

      :global(.value) {
        color: $selection-color;
      }

      .index,
      .bracket,
      .separator {
        color: $meta-color-selected;
      }

      .tag {
        background: $theme-color-light;
      }
    }
  }
}

// TODO: create a class shared by .expand and .validation-error buttons
.validation-error {
  color: $warning-color;
  padding: 0 $input-padding;
  height: $line-height;
  line-height: $line-height;
  font-size: $font-size;
  position: relative;
  top: 2px;
}

:global(.bubble.dark) {
  background: $dark-gray !important;
  color: $white;
  font-family: $font-family !important;
  font-size: $font-size !important;
}
