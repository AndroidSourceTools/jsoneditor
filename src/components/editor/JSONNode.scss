@import '../../styles.scss';

.json-node {
  position: relative;
  font-family: $font-family-mono;
  font-size: $font-size-mono;
  color: $black;

  &.root {
    min-height: 100%;
    padding-bottom: $input-padding;
    box-sizing: border-box;
  }

  &.hovered {
    .header,
    .contents,
    .footer {
      background-color: $hovered-background;
    }
  }

  $selector-height: 8px; // must be about half a line height

  .props,
  .items {
    position: relative;
  }

  .before-node-selector,
  .append-node-selector {
    position: absolute;
    left: 0;
    right: $input-padding;
    height: $selector-height;
    box-sizing: border-box;
    padding-left: $indentation-width;
    z-index: 1;

    .selector {
      margin-top: $selector-height / 2;
    }

    &:hover {
      .selector {
        border: 1px dashed $light-gray;
      }
    }

    &.selected {
      .selector {
        border: 1px dashed $gray;
      }
    }
  }

  // selector must not be visible whilst dragging (mouse down)
  // FIXME: should not be visible when mouse is down during dragging
  &:active {
    .before-node-selector,
    .append-node-selector {
      &:not(.selected) {
        .selector {
          border: none;
        }
      }
    }
  }

  .before-node-selector {
    top: -$selector-height/2 - 1px;
  }

  .append-node-selector {
    bottom: -$selector-height/2 - 1px;

    .selector {
      margin-top: $selector-height / 2 - 2px;
    }
  }

  .header {
    position: relative;

    .meta {
      > .meta-inner {
        display: flex;
        justify-content: center;
      }
    }
  }

  .header,
  .contents {
    display: table;
    flex-direction: row;

    line-height: $line-height;

    > * {
      display: table-cell;
    }
  }

  .contents {
    padding-left: $line-height ; // must be the same as the width of the expand button
    padding-right: 5px;
  }

  .footer {
    display: inline-block;
    padding-left: $line-height + $input-padding; // must be the same as the width of the expand button
  }
}

.expand {
  position: relative;
  top: 2px;
  width: $line-height;
  height: $line-height;
  padding: 0;
  margin: 0;
  border: none;
  cursor: pointer;
  background: transparent;
  color: $gray-icon;
  font-size: $font-size-mono;
  line-height: $line-height;
}

.key,
.value {
  line-height: $line-height;
  min-width: 16px;
  word-break: normal;
  padding: 0 $input-padding;
  outline: none;
  border-radius: 1px;
  vertical-align: top;
}

.meta,
.separator,
.bracket {
  vertical-align: top;
  color: $gray;
}

.bracket {
  padding: 0 2px;

  &.expanded {
    padding-right: $padding * 2;
  }
}

.tag {
  vertical-align: top;
  border: none;
  font-size: $font-size-small;
  font-family: $font-family;
  color: white;
  background: $light-gray;
  border-radius: 2px;
  padding: 0 4px 1px;
  margin: 2px;
  cursor: pointer;
  position: relative;

  &:hover {
    background: lighten($light-gray, 5%);
  }
}

.value {

  &.string {
    color: #008000;
  }

  &.object,
  &.array {
    min-width: 16px;
    color: $gray;
  }

  &.number {
    color: #ee422e;
  }

  &.boolean {
    color: #ff8c00;
  }

  &.null {
    color: #004ED0;
  }

  &.invalid {
    color: #000000;
  }

  &.url {
    color: green;
    text-decoration: underline;
  }
}

div.empty {
  &:not(:focus) {
    outline: 1px dotted lightgray;
    -moz-outline-radius: 2px;
  }
  
  &::after {
    pointer-events: none;
    color: lightgray;
  }

  &.key::after {
    content: 'key';
  }

  &.value::after {
    content: 'value';
  }
}

.key.search,
.value.search {
  background-color: $highlight-color;

  &.active {
    background-color: $highlight-active-color;
  }
}

// TODO: simplify the CSS needed to correctly highlight the selection
.json-node {
  // entry selected
  &.selected {
    .header,
    .contents,
    .meta,
    .bracket,
    .separator,
    .expand,
    .footer {
      background-color: $selection-background;
      color: $selection-color;
    }

    .value {
      color: $selection-color;
    }

    .tag {
      background: $theme-color-light;
    }
  }

  // key selected
  &.selected-key {
    > .contents > .key,
    > .header > .key {
      background-color: $selection-background;
      color: $selection-color;
    }
  }

  // value selected
  &.selected-value {
    > .header > .meta,
    > .footer,
    > .contents > .value,
    > .contents .contents,
    .props .contents,
    .props .header,
    .props .footer,
    .props .expand,
    .items .contents,
    .items .header,
    .items .footer,
    .items .expand {
      background-color: $selection-background;
      color: $selection-color;

      .value {
        color: $selection-color;
      }

      .bracket {
        color: $selection-color;
      }

      .tag {
        background: $theme-color-light;
      }
    }
  }

  .key[contenteditable="true"],
  .value[contenteditable="true"] {
    outline: 2px solid $darkblue; // TODO: border should be displayed on top of light gray highlight background when hovering sibling above or below
    background: $theme-color;
    color: $selection-color !important;
  }
}

// TODO: create a class shared by .expand and .validation-error buttons
.validation-error {
  color: $warning-color;
  padding: 0 $input-padding;
  height: $line-height;
  line-height: $line-height;
  font-size: $font-size;
  position: relative;
  top: 2px;
}
